#!/usr/bin/env python

#####################################################################
# Software License Agreement (BSD License)
#
# Copyright (c) 2016, Michal Drwiega
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#####################################################################

import rospy
import logging
import sys
import time
import mraa

from time import time
from sensor_msgs.msg import Range

from tf.transformations import quaternion_from_euler
from dynamic_reconfigure.server import Server
from diagnostic_msgs.msg import DiagnosticArray, DiagnosticStatus, KeyValue

class LV_MaxSonar_EZ(object):

    def __init__(self, a_pin=None,pwm_pin=None, serial_pin=None, **kwargs):
        # If reset pin is provided save it and a reference to provided GPIO
        # bus (or the default system GPIO bus if none is provided).
         
        self._analog = None
        self._pwm = None
	self._serial = None
	if a_pin is not None:
	    self._analog=mraa.Aio(a_pin)
        elif pwm_pin is not None:
            self._pwm= mraa.Pwm(pwm_pin) 
	    self._pwm.enable(True)
        elif serial_pin is not None:
            # Use serial communication if serial_port name is provided.
            # Open the serial port at 115200 baud, 8N1.  Add a 5 second timeout
            # to prevent hanging if device is disconnected.
            self._serial = mraa.Uart(serial_port)
            self._serial.setBaudRate(115200)
	    self._serial.setMode(8, mraa.UART_PARITY_NONE, 1)
	    self._serial.setFlowcontrol(False, False)

    def _read (self):
        print self._pwm.read()
        return self._pwm.read()

    def read_distance (self):
        return self._read()/147/39.37

# Main function
if __name__ == '__main__':
    rospy.init_node("lv_maxsonar_node")

    # Sensor measurements publishers
    pub_ultra_0 = rospy.Publisher('ultrasonic_0', Range, queue_size=1)
    pub_ultra_1 = rospy.Publisher('ultrasonic_1', Range, queue_size=1)
    
    # Get parameters values
    pwm_pin_0 = rospy.get_param('~pwm_0', 32)
    pwm_pin_1 = rospy.get_param('~pwm_1', 33)
    frame_id_0 = rospy.get_param('~frame_id_0', 'ultrasonic_0_link')
    frame_id_1 = rospy.get_param('~frame_id_1', 'ultrasonic_1_link')
    frequency = rospy.get_param('~frequency', 30)
  

    ultra_0 = LV_MaxSonar_EZ(pwm_pin=pwm_pin_0)
    ultra_1 = LV_MaxSonar_EZ(pwm_pin=pwm_pin_1)    
    ultra_data = Range()
    seq=0    
    
    rate = rospy.Rate(frequency)
    while not rospy.is_shutdown():
        ultra_data.header.stamp=rospy.Time.now()
        ultra_data.header.frame_id=frame_id_0
        ultra_data.header.seq = seq
        ultra_data.radiation_type=0
        ultra_data.field_of_view=0.347
        ultra_data.min_range=0.152
        ultra_data.max_range=6.45
        ultra_data.range=ultra_0.read_distance()
        pub_ultra_0.publish(ultra_data)

        ultra_data.header.stamp=rospy.Time.now()
        ultra_data.header.frame_id=frame_id_1
        ultra_data.header.seq = seq
        ultra_data.radiation_type=0
        ultra_data.field_of_view=0.347
        ultra_data.min_range=0.152
        ultra_data.max_range=6.45
        ultra_data.range=ultra_1.read_distance()
        pub_ultra_1.publish(ultra_data)

	seq = seq + 1
        rate.sleep()

